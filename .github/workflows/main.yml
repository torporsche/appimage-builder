name: Containers

on:
  push:
    branches:
      main
  pull_request:
  workflow_dispatch:
    inputs:
      type:
        type: choice
        default: draft
        options:
        - build
        - draft
        - release
  workflow_call:
    inputs:
      submodule-refs:
        type: string
        default: "[]"
      mcpelauncher-repo:
        type: string
        default: https://github.com/minecraft-linux/mcpelauncher-manifest
      mcpelauncher-ref:
        type: string
        default: ${{ github.repository == 'minecraft-linux/mcpelauncher-manifest' && (github.ref_name == 'ng' && github.sha) || 'ng' }}
      mcpelauncher-qt6-ref:
        type: string
        default: ${{ github.repository == 'minecraft-linux/mcpelauncher-manifest' && (github.ref_name == 'qt6' && github.sha) || 'qt6' }}
      mcpelauncher-ui-repo:
        type: string
        default: https://github.com/minecraft-linux/mcpelauncher-ui-manifest
      mcpelauncher-ui-ref:
        type: string
        default: ${{ github.repository == 'minecraft-linux/mcpelauncher-ui-manifest' && (github.ref_name == 'ng' && github.sha) || 'ng' }}
      mcpelauncher-ui-qt6-ref:
        type: string
        default: ${{ github.repository == 'minecraft-linux/mcpelauncher-ui-manifest' && (github.ref_name == 'qt6' && github.sha) || 'qt6' }}
      msa-repo:
        type: string
        default: https://github.com/minecraft-linux/msa-manifest
      msa-ref:
        type: string
        default: ${{ github.repository == 'minecraft-linux/msa-manifest' && (github.sha || github.ref) || 'master' }}
      update-information:
        type: string
        default: ""
      tag-name:
        type: string
        default: ""
      suffix:
        type: string
        default: ""
      appImageFlags:
        #-l -DGAMEWINDOW_SYSTEM=SDL3
        type: string
        default: ""

permissions:
  id-token: write
  contents: read
env:
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: ChristopherHX/oidc@f8f35d97bc37ffbe779bb3ab8453920fedf6fb37
        id: oidc
        continue-on-error: true
  
      - uses: actions/checkout@v3
        with:
          repository: ${{ steps.oidc.outputs.job_workflow_repo_name_and_owner || inputs.submodule-refs && 'minecraft-linux/appimage-builder' || github.repository }}
          ref: ${{ steps.oidc.outputs.job_workflow_repo_ref || inputs.submodule-refs && 'main' || github.sha || github.ref }}
  
      - name: Sync Submodule Sources
        if: ${{ inputs.submodule-refs }}
        uses: actions/github-script@v6
        with:
          github-token: none
          script: |
            var downloadRepo = async function(path, repo, ref) {
              await io.mkdirP(path);
              await exec.exec("git", ["init"], { cwd: path });
              await exec.exec("git", ["remote", "add", "origin", repo], { cwd: path });
              await exec.exec("git", ["fetch", "origin", ref], { cwd: path });
              await exec.exec("git", ["reset", "--hard", "FETCH_HEAD"], { cwd: path });
              await exec.exec("git", ["submodule", "update", "--init", "--recursive"], { cwd: path });
            };
            await downloadRepo("source/mcpelauncher", process.env.MCPELAUNCHER_REPO, process.env.MCPELAUNCHER_REF);
            await downloadRepo("source/mcpelauncher-ui", process.env.MCPELAUNCHER_UI_REPO, process.env.MCPELAUNCHER_UI_REF);
            await downloadRepo("source/msa", process.env.MSA_REPO, process.env.MSA_REF);
            var submoduleRefs = JSON.parse(process.env.SUBMODULEREFS);
            for(var submoduleRef of submoduleRefs) {
              await exec.exec("git", ["fetch", submoduleRef.origin || "origin", submoduleRef.ref], { cwd: `source/${submoduleRef.project}/${submoduleRef.path}` });
              await exec.exec("git", ["checkout", "FETCH_HEAD"], { cwd: `source/${submoduleRef.project}/${submoduleRef.path}` });
            }
        env:
          SUBMODULEREFS: ${{ inputs.submodule-refs }}
          MCPELAUNCHER_REPO: ${{ inputs.mcpelauncher-repo }}
          MCPELAUNCHER_REF: ${{ inputs.mcpelauncher-ref }}
          MCPELAUNCHER_UI_REPO: ${{ inputs.mcpelauncher-ui-repo }}
          MCPELAUNCHER_UI_REF: ${{ inputs.mcpelauncher-ui-ref }}
          MSA_REPO: ${{ inputs.msa-repo }}
          MSA_REF: ${{ inputs.msa-ref }}
  
      - name: Build (in container)
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker pull buildpack-deps:jammy
          apt-get update &&
          apt-get install -y libcurl4-openssl-dev curl 
          curl -L https://github.com/Kitware/CMake/releases/download/v3.16.2/cmake-3.16.2-Linux-x86_64.tar.gz --output cmake.tar.gz
          tar --no-same-owner -xf cmake.tar.gz
          curl -L https://github.com/llvm/llvm-project/releases/download/llvmorg-15.0.6/clang+llvm-15.0.6-x86_64-linux-gnu-ubuntu-18.04.tar.xz --output llvm.tar.xz
          tar --no-same-owner -xf llvm.tar.xz
          docker run -e GITHUB_RUN_NUMBER=${GITHUB_RUN_NUMBER} \
            -v $PWD:$PWD -w $PWD --rm buildpack-deps:jammy bash -c "
              apt-get update &&
              apt-get install -y libcurl4-openssl-dev curl &&
              export PATH=\$PWD/cmake-3.16.2-Linux-x86_64/bin:\$PWD/clang+llvm-15.0.6-x86_64-linux-gnu-ubuntu-18.04/bin:\$PATH &&
              export LD_LIBRARY_PATH=\$PWD/clang+llvm-15.0.6-x86_64-linux-gnu-ubuntu-18.04/lib:\$PWD/build/AppDir/usr/lib &&
              export CC=clang &&
              export CXX=clang++ &&
              ./build_appimage.sh -j4 -k 'zsync|${{ inputs.update-information || 'https://github.com/minecraft-linux/appimage-builder/releases/download/ng.appimage' }}/version${{ inputs.suffix }}.x86_64.zsync' -i \${GITHUB_RUN_NUMBER}${{ inputs.submodule-refs && ' -s' || '' }}${{ inputs.tag-name && format(' -r {0}', inputs.tag-name) || '' }} -p '${{ inputs.suffix }}' ${{ inputs.appImageFlags }}
            "
      - name: create update info
        run: |
          cd output
          file=(*.AppImage)
          echo build_id=2000$'\n'download_url=${{ inputs.update-information || 'https://github.com/minecraft-linux/appimage-builder/releases/download/ng.appimage' }}/${file} > version.amd64
  
      - uses: minecraft-linux/actions-upload-artifact-node-16@v4
        with:
          name: appimage-linux${{ inputs.suffix }}-x86_64
          path: output/
  publish:
    permissions: write-all
    runs-on: ubuntu-latest
    needs: [ build ]
    if: ${{ !cancelled() && (github.event_name == 'push' && github.server_url == 'https://github.com' && github.repository == 'minecraft-linux/appimage-builder' || github.event_name == 'workflow_dispatch' && inputs.type != 'build') }}
    steps:
    - uses: actions/checkout@v3
    - run: echo "APPIMAGE_VERSION=$(cat version.txt)" >> $GITHUB_ENV
    - name: Setup Vars
      id: setup-vars
      uses: actions/github-script@v6
      with:
        script: |
          core.setOutput("owner", context.repo.owner)
          core.setOutput("repo", context.repo.repo)
    - name: Download everything
      uses: actions/download-artifact@v4
      with:
        path: output
        pattern: appimage-*
        merge-multiple: true
    - name: Download ghr
      run: |
        curl -L https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_linux_amd64.tar.gz --output ghr.tar.gz
        tar -xf ghr.tar.gz
    - name: Upload ${{ github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[DRAFT]' || github.event_name == 'workflow_dispatch' && inputs.type == 'release') && 'Latest' || 'Draft' }}
      if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' && inputs.type != 'build'
      run: |
        ./ghr*/ghr -c ${{ github.sha }} -t ${{ secrets.GITHUB_TOKEN }} -u ${{ steps.setup-vars.outputs.owner }} -r ${{ steps.setup-vars.outputs.repo }} ${{ !(github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[DRAFT]') || github.event_name == 'workflow_dispatch' && inputs.type == 'release') && '-draft ' || '' }}-b "$LAUNCHER_RELEASE_DESCRIPTION$(cat changelog.txt)" "$(cat version.txt)-${GITHUB_RUN_NUMBER}" output/
      env:
        LAUNCHER_RELEASE_DESCRIPTION: |
          Links for linux flatpak or macOS can be found on our wiki https://minecraft-linux.github.io.
          > [!CAUTION]
          > - You need to own Minecraft on the google play store and login with your google account to use this launcher
          > - Only Systems with OpenGL ES 3.0 GPU's e.g. intel integrated GPU first sold in 2012 (those from 2011 might work as well) or later can run versions after Minecraft 1.20.15
          > - Only Systems with OpenGL ES 3.1 GPU's can continue using the GPU after March 2025

          [Download link for intel or amd based 64bit systems ( known as amd64, intel64 and x86_64 e.g. most PC's or Laptops )](https://github.com/minecraft-linux/appimage-builder/releases/download/${{env.APPIMAGE_VERSION}}-${{github.run_number}}/Minecraft_Bedrock_Launcher-x86_64-${{env.APPIMAGE_VERSION}}.${{github.run_number}}.AppImage)

          [Download link for arm based 64bit systems ( known as arm64 and aarch64 e.g. raspberry Pi3 or later, pinephone or pinebook )](https://github.com/minecraft-linux/appimage-builder/releases/download/${{env.APPIMAGE_VERSION}}-${{github.run_number}}/Minecraft_Bedrock_Launcher-arm64-${{env.APPIMAGE_VERSION}}.${{github.run_number}}.AppImage)

          - run `uname -a` to know which system you are using
          - once downloaded the launcher shows you banner if an update is available
            - no need to download the whole file again
            - usually small updates with less than 5MB
            - you can update it externally with appimageupdate or appimagelauncher
            - the check for updates can be disabled in settings

          # Not available Features you may miss
          - Xbox live friend joining
            - usually times out or crashs the game in both directions
            - consider using the offical server software <https://www.minecraft.net/en-us/download/server/bedrock>
              - connect all by ip as external server
          - Xbox live login
            - a lot of devices seem to get error code "drowned" without beeing asked for login
              - error code "drowned" has more meanings like you closed the webview window without sign in or you pressed signin too early
            - sometimes it helps to select a timezone used by developers of this launcher like Europe/Berlin or using a fixed UTC timezone without any Region/City
          ### Changelog
    - name: Publish release
      if: github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[DRAFT]') || github.event_name == 'workflow_dispatch' && inputs.type == 'release'
      run: |
        mkdir -p output3
        cp output/*.zsync output3/
        ./ghr*/ghr -t ${{ secrets.GITHUB_TOKEN }} -u ${{ steps.setup-vars.outputs.owner }} -r ${{ steps.setup-vars.outputs.repo }} -replace ng.appimage output3/
        ./ghr*/ghr -t ${{ secrets.GITHUB_TOKEN }} -u ${{ steps.setup-vars.outputs.owner }} -r ${{ steps.setup-vars.outputs.repo }} -replace appimage output3/
